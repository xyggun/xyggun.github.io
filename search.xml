<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[scp命令学习]]></title>
      <url>/2017/04/27/scp%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><strong><em> <a href="http://www.cnblogs.com/peida/archive/2013/03/15/2960802.html" target="_blank" rel="external">原文</a> 是在cnblog上的，但是cn上的显示有点捉急。我根据自己对原文章的学习以及理解，将它拷贝过来了。</em></strong></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&emsp;scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。</p>
<h2 id="使用简介"><a href="#使用简介" class="headerlink" title="使用简介"></a>使用简介</h2><h3 id="1．命令格式："><a href="#1．命令格式：" class="headerlink" title="1．命令格式："></a>1．命令格式：</h3><p>&emsp;scp [参数] [原路径] [目标路径]</p>
<h3 id="2．命令功能："><a href="#2．命令功能：" class="headerlink" title="2．命令功能："></a>2．命令功能：</h3><p>&emsp;scp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。linux的scp命令可以在linux服务器之间复制文件和目录。</p>
<h3 id="3．命令参数："><a href="#3．命令参数：" class="headerlink" title="3．命令参数："></a>3．命令参数：</h3><p>&emsp;-1  强制scp命令使用协议ssh1<br>&emsp;-2  强制scp命令使用协议ssh2<br>&emsp;-4  强制scp命令只使用IPv4寻址<br>&emsp;-6  强制scp命令只使用IPv6寻址<br>&emsp;-B  使用批处理模式（传输过程中不询问传输口令或短语）<br>&emsp;-C  允许压缩。（将-C标志传递给ssh，从而打开压缩功能）<br>&emsp;-p 保留原文件的修改时间，访问时间和访问权限。<br>&emsp;-q  不显示传输进度条。<br>&emsp;-r  递归复制整个目录。<br>&emsp;-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。<br>&emsp;-c cipher  以cipher将数据传输进行加密，这个选项将直接传递给ssh。<br>&emsp;-F ssh_config  指定一个替代的ssh配置文件，此参数直接传递给ssh。<br>&emsp;-i identity_file  从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。<br>&emsp;-l limit  限定用户所能使用的带宽，以Kbit/s为单位。<br>&emsp;-o ssh_option  如果习惯于使用ssh_config(5)中的参数传递方式，<br>&emsp;-P port  注意是大写的P, port是指定数据传输用到的端口号<br>&emsp;-S program  指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</p>
<h3 id="4．使用实例："><a href="#4．使用实例：" class="headerlink" title="4．使用实例："></a>4．使用实例：</h3><p>scp命令的实际应用概述：<br>从本地服务器复制到远程服务器： </p>
<h4 id="1-复制文件："><a href="#1-复制文件：" class="headerlink" title="(1) 复制文件："></a>(1) 复制文件：</h4><p>命令格式：scp local_file remote_username@remote_ip:remote_folder<br>或者 scp local_file remote_username@remote_ip:remote_file<br>或者 scp local_file remote_ip:remote_folder<br>或者 scp local_file remote_ip:remote_file<br>第1,2个指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名<br>第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名   </p>
<h4 id="2-复制目录："><a href="#2-复制目录：" class="headerlink" title="(2) 复制目录："></a>(2) 复制目录：</h4><p>命令格式：scp -r local_folder remote_username@remote_ip:remote_folder<br>或者 scp -r local_folder remote_ip:remote_folder<br>第1个指定了用户名，命令执行后需要输入用户密码；<br>第2个没有指定用户名，命令执行后需要输入用户名和密码；</p>
<p>从远程服务器复制到本地服务器：<br>从远程复制到本地的scp命令与上面的命令雷同，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。</p>
<h4 id="实例1：从远处复制文件到本地目录"><a href="#实例1：从远处复制文件到本地目录" class="headerlink" title="实例1：从远处复制文件到本地目录"></a>实例1：从远处复制文件到本地目录</h4><p>命令：scp root@192.168.120.204:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/<br>输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># cd /opt/soft/</span></div><div class="line">[root@localhost soft]<span class="comment"># ll</span></div><div class="line">总计 80072</div><div class="line">drwxr-xr-x 12 root root     4096 09-21 18:40 fms3.5</div><div class="line">drwxr-xr-x  3 root root     4096 09-21 17:58 fms4.5</div><div class="line">drwxr-xr-x 10 root root     4096 10-30 17:15 jdk1.6.0_16</div><div class="line">drwxr-xr-x 10 root root     4096 09-17 19:27 jdk1.6.0_16.bak</div><div class="line">-rwxr-xr-x  1 root root 81871260 2009-12-21 jdk-6u16-linux-x64.bin</div><div class="line">drwxrwxrwx  2 root root     4096 09-21 01:16 mysql</div><div class="line">drwxr-xr-x  3 root root     4096 09-21 18:40 setup_file</div><div class="line">drwxr-xr-x  9 root root     4096 09-17 19:23 tomcat6.0.32</div><div class="line">drwxr-xr-x  9 root root     4096 2012-08-14 tomcat_7.0</div><div class="line">[root@localhost soft]<span class="comment"># scp root@192.168.120.204:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/</span></div><div class="line">root@<span class="string">'192.168.120.204'</span>s password: </div><div class="line">nginx-0.5.38.tar.gz                                                                               100%  479KB 478.7KB/s   00:00    </div><div class="line">[root@localhost soft]<span class="comment"># ll</span></div><div class="line">总计 80556</div><div class="line">drwxr-xr-x 12 root root     4096 09-21 18:40 fms3.5</div><div class="line">drwxr-xr-x  3 root root     4096 09-21 17:58 fms4.5</div><div class="line">drwxr-xr-x 10 root root     4096 10-30 17:15 jdk1.6.0_16</div><div class="line">drwxr-xr-x 10 root root     4096 09-17 19:27 jdk1.6.0_16.bak</div><div class="line">-rwxr-xr-x  1 root root 81871260 2009-12-21 jdk-6u16-linux-x64.bin</div><div class="line">drwxrwxrwx  2 root root     4096 09-21 01:16 mysql</div><div class="line">-rw-r--r--  1 root root   490220 03-15 09:11 nginx-0.5.38.tar.gz</div><div class="line">drwxr-xr-x  3 root root     4096 09-21 18:40 setup_file</div><div class="line">drwxr-xr-x  9 root root     4096 09-17 19:23 tomcat6.0.32</div><div class="line">drwxr-xr-x  9 root root     4096 2012-08-14 tomcat_7.0</div><div class="line">[root@localhost soft]<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>说明：从192.168.120.204机器上的/opt/soft/的目录中下载nginx-0.5.38.tar.gz 文件到本地/opt/soft/目录中</p>
<h4 id="实例2：从远处复制到本地"><a href="#实例2：从远处复制到本地" class="headerlink" title="实例2：从远处复制到本地"></a>实例2：从远处复制到本地</h4><p>命令：scp -r root@192.168.120.204:/opt/soft/mongodb /opt/soft/<br>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">[root@localhost soft]<span class="comment"># ll</span></div><div class="line">总计 80556</div><div class="line">drwxr-xr-x 12 root root     4096 09-21 18:40 fms3.5</div><div class="line">drwxr-xr-x  3 root root     4096 09-21 17:58 fms4.5</div><div class="line">drwxr-xr-x 10 root root     4096 10-30 17:15 jdk1.6.0_16</div><div class="line">drwxr-xr-x 10 root root     4096 09-17 19:27 jdk1.6.0_16.bak</div><div class="line">-rwxr-xr-x  1 root root 81871260 2009-12-21 jdk-6u16-linux-x64.bin</div><div class="line">drwxrwxrwx  2 root root     4096 09-21 01:16 mysql</div><div class="line">-rw-r--r--  1 root root   490220 03-15 09:11 nginx-0.5.38.tar.gz</div><div class="line">drwxr-xr-x  3 root root     4096 09-21 18:40 setup_file</div><div class="line">drwxr-xr-x  9 root root     4096 09-17 19:23 tomcat6.0.32</div><div class="line">drwxr-xr-x  9 root root     4096 2012-08-14 tomcat_7.0</div><div class="line">[root@localhost soft]<span class="comment"># scp -r root@192.168.120.204:/opt/soft/mongodb /opt/soft/</span></div><div class="line">root@192.168.120.204<span class="string">'s password: </span></div><div class="line">mongodb-linux-i686-static-1.8.5.tgz                                                               100%   28MB  28.3MB/s   00:01    </div><div class="line">README                                                                                            100%  731     0.7KB/s   00:00    </div><div class="line">THIRD-PARTY-NOTICES                                                                               100% 7866     7.7KB/s   00:00    </div><div class="line">mongorestore                                                                                      100% 7753KB   7.6MB/s   00:00    </div><div class="line">mongod                                                                                            100% 7760KB   7.6MB/s   00:01    </div><div class="line">mongoexport                                                                                       100% 7744KB   7.6MB/s   00:00    </div><div class="line">bsondump                                                                                          100% 7737KB   7.6MB/s   00:00    </div><div class="line">mongofiles                                                                                        100% 7748KB   7.6MB/s   00:01    </div><div class="line">mongostat                                                                                         100% 7808KB   7.6MB/s   00:00    </div><div class="line">mongos                                                                                            100% 5262KB   5.1MB/s   00:01    </div><div class="line">mongo                                                                                             100% 3707KB   3.6MB/s   00:00    </div><div class="line">mongoimport                                                                                       100% 7754KB   7.6MB/s   00:00    </div><div class="line">mongodump                                                                                         100% 7773KB   7.6MB/s   00:00    </div><div class="line">GNU-AGPL-3.0                                                                                      100%   34KB  33.7KB/s   00:00    </div><div class="line">[root@localhost soft]# ll</div><div class="line">总计 80560</div><div class="line">drwxr-xr-x 12 root root     4096 09-21 18:40 fms3.5</div><div class="line">drwxr-xr-x  3 root root     4096 09-21 17:58 fms4.5</div><div class="line">drwxr-xr-x 10 root root     4096 10-30 17:15 jdk1.6.0_16</div><div class="line">drwxr-xr-x 10 root root     4096 09-17 19:27 jdk1.6.0_16.bak</div><div class="line">-rwxr-xr-x  1 root root 81871260 2009-12-21 jdk-6u16-linux-x64.bin</div><div class="line">drwxr-xr-x  3 root root     4096 03-15 09:18 mongodb</div><div class="line">drwxrwxrwx  2 root root     4096 09-21 01:16 mysql</div><div class="line">-rw-r--r--  1 root root   490220 03-15 09:11 nginx-0.5.38.tar.gz</div><div class="line">drwxr-xr-x  3 root root     4096 09-21 18:40 setup_file</div><div class="line">drwxr-xr-x  9 root root     4096 09-17 19:23 tomcat6.0.32</div><div class="line">drwxr-xr-x  9 root root     4096 2012-08-14 tomcat_7.0</div><div class="line">[root@localhost soft]#</div></pre></td></tr></table></figure></p>
<p>说明：从192.168.120.204机器上的/opt/soft/中下载mongodb 目录到本地的/opt/soft/目录来。</p>
<h4 id="实例3：上传本地文件到远程机器指定目录"><a href="#实例3：上传本地文件到远程机器指定目录" class="headerlink" title="实例3：上传本地文件到远程机器指定目录"></a>实例3：上传本地文件到远程机器指定目录</h4><p>命令：scp /opt/soft/nginx-0.5.38.tar.gz root@192.168.120.204:/opt/soft/scptest<br>输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">上传前目标机器的目标目录：</div><div class="line">[root@localhost soft]<span class="comment"># cd scptest/</span></div><div class="line">[root@localhost scptest]<span class="comment"># ll</span></div><div class="line">总计 0</div><div class="line">[root@localhost scptest]<span class="comment"># ll</span></div><div class="line"></div><div class="line">本地机器上传：</div><div class="line">[root@localhost soft]<span class="comment"># scp /opt/soft/nginx-0.5.38.tar.gz root@192.168.120.204:/opt/soft/scptest</span></div><div class="line">root@<span class="string">'192.168.120.204'</span>s password: </div><div class="line">nginx-0.5.38.tar.gz                                                                               100%  479KB 478.7KB/s   00:00    </div><div class="line">[root@localhost soft]<span class="comment"># </span></div><div class="line"></div><div class="line">上传后目标机器的目标目录：</div><div class="line">[root@localhost scptest]<span class="comment"># ll</span></div><div class="line">总计 484</div><div class="line">-rw-r--r-- 1 root root 490220 03-15 09:25 nginx-0.5.38.tar.gz</div><div class="line">[root@localhost scptest]<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>说明：复制本地opt/soft/目录下的文件nginx-0.5.38.tar.gz 到远程机器192.168.120.204的opt/soft/scptest目录</p>
<h4 id="实例4：上传本地目录到远程机器指定目录"><a href="#实例4：上传本地目录到远程机器指定目录" class="headerlink" title="实例4：上传本地目录到远程机器指定目录"></a>实例4：上传本地目录到远程机器指定目录</h4><p>命令：scp -r /opt/soft/mongodb root@192.168.120.204:/opt/soft/scptest<br>输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">上传前目标机器的目标目录：</div><div class="line">[root@localhost ~]<span class="comment"># cd /opt/soft/scptest/</span></div><div class="line">[root@localhost scptest]<span class="comment"># ll</span></div><div class="line">总计 484</div><div class="line">-rw-r--r-- 1 root root 490220 03-15 09:25 nginx-0.5.38.tar.gz</div><div class="line">[root@localhost scptest]<span class="comment"># </span></div><div class="line">本地机器上传：</div><div class="line">[root@localhost ~]<span class="comment"># scp -r /opt/soft/mongodb root@192.168.120.204:/opt/soft/scptest</span></div><div class="line">root@<span class="string">'192.168.120.204'</span>s password: </div><div class="line">mongodb-linux-i686-static-1.8.5.tgz                                                               100%   28MB  28.3MB/s   00:01    </div><div class="line">README                                                                                            100%  731     0.7KB/s   00:00    </div><div class="line">THIRD-PARTY-NOTICES                                                                               100% 7866     7.7KB/s   00:00    </div><div class="line">mongorestore                                                                                      100% 7753KB   7.6MB/s   00:00    </div><div class="line">mongod                                                                                            100% 7760KB   7.6MB/s   00:01    </div><div class="line">mongoexport                                                                                       100% 7744KB   7.6MB/s   00:00    </div><div class="line">bsondump                                                                                          100% 7737KB   7.6MB/s   00:00    </div><div class="line">mongofiles                                                                                        100% 7748KB   7.6MB/s   00:00    </div><div class="line">mongostat                                                                                         100% 7808KB   7.6MB/s   00:01    </div><div class="line">mongos                                                                                            100% 5262KB   5.1MB/s   00:00    </div><div class="line">mongo                                                                                             100% 3707KB   3.6MB/s   00:00    </div><div class="line">mongoimport                                                                                       100% 7754KB   7.6MB/s   00:01    </div><div class="line">mongodump                                                                                         100% 7773KB   7.6MB/s   00:00    </div><div class="line">GNU-AGPL-3.0                                                                                      100%   34KB  33.7KB/s   00:00    </div><div class="line">[root@localhost ~]<span class="comment"># </span></div><div class="line"></div><div class="line">上传后目标机器的目标目录：</div><div class="line">[root@localhost scptest]<span class="comment"># ll</span></div><div class="line">总计 488</div><div class="line">drwxr-xr-x 3 root root   4096 03-15 09:33 mongodb</div><div class="line">-rw-r--r-- 1 root root 490220 03-15 09:25 nginx-0.5.38.tar.gz</div><div class="line">[root@localhost scptest]<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>说明：上传本地目录 /opt/soft/mongodb到远程机器192.168.120.204上/opt/soft/scptest的目录中去</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
            <category> 转载 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[北京行]]></title>
      <url>/2017/04/27/%E5%8C%97%E4%BA%AC%E8%A1%8C/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;2017年3月18日早上7点多起床洗漱打车到了火车到东站乘坐9点05分开的g36次列车。经过了5个多小时的行程到了北京南站，在火车上因为没有买什么吃的，在车上到了中午还是很饿的，本来准备买点吃的解决一下，可是火车上60元每份的快餐，实在是超出了我的承受能力。到了北京南站后，下车吃了份德克士差点吃撑。之后百度了一下地址。准备买地铁票直接杀到第一站军博，火车战上买地铁票的人很多拍了很久，买了到军博的票。<br>&emsp;&emsp;先坐了6后线，在转车到1号线之后到了军事博物馆站下了车。下次之后我满心欢喜的去寻找军博，除了地铁站，先看到的是军事禁区的警示牌走了一圈之后，发现门前岗哨林立，看了地图之后才发现不是军博。之后问了出租车司机之后才知道哪个兼备森严的地方是军委所在地。经过地图的导航，发现旁边的地方就是军博。但是走到门口才发现军博居然在装修，在装修啊！！！<br>&emsp;&emsp;绕着军博走了一圈之后在军博后面的地方打了个车到了天安门。在广场上逛了一下，来的比较迟了，升旗是看不上了，那就看看降旗吧！到了将近6点15分的时候，天安门广场前的这段长安街开始封道了，也是苦了在每天在长安街上跑的车辆了，每天都要封路。很快国旗护卫队就迈着整齐的步伐从天安门城楼下出来了。<br>&emsp;&emsp;在将近六点15的时候在广场上看了降国企仪式之后。就一直沿着天安门南边的铁树斜街走了几圈，同时寻找最近的小汤陈店里去吃了卤煮。这边的这个铁树斜街还是给我很多震撼的，没想到在天安门这么近的地方居然还有这种老房子扎堆的地方。<br><!-- &emsp;&emsp;卤煮还是挺好吃的就是大肠不是很喜欢。饭后在附近溜了一下，在一个天桥上拍了几张照片
&emsp;&emsp;在地铁站办了张北京交通卡之后，到了附近的一家布丁酒店住了一晚。第二天在北京第一次吃了早餐，包子是我喜欢的类型，之后几天，都是吃的包子。
&emsp;&emsp;然后坐车直接到故宫参观，不得不感叹，首都的安保是很强的啊，在公交车上都有安保人员。公交车的票价也是便宜的没朋友啊！
&emsp;&emsp;故宫出来之后坐了游览车到了王府井大街后，逛了一下就打车直奔昌平坦克博物馆。
&emsp;&emsp;逛完之后在出来的时候，发现这边的公交车实在是难等，而且雾霾实在是太严重了。等了快一个小时之后终于等到了公交车之后，到了昌平区上了个网
&emsp;&emsp;之后就到了预定的酒店住了下来
&emsp;&emsp;第三天，退房之后，发现天好像要下雨，今天计划是去爬长城的。今天估计是个不好过的一天啊！早饭又吃了包子
&emsp;&emsp;又是包子，北京的包子都是按两来买的，一两三到四个。吃完之后，打了个车直接杀到了长城，因为下雨，所以在门口就下车了。
&emsp;&emsp;买了票之后，因为雨挺大的，还是买了索道的票，加快上去的步伐。索道的人实在是多，饶了十几圈啊
&emsp;&emsp;上去的索道还是很吓人的完全是垂直着往上走的，让我差点😄打消下山也做这个的计划。到了上面之后
&emsp;&emsp;下了索道之后，做了直达德胜门的公交
&emsp;&emsp;到了德胜门之后，直接赶往了定的酒店住宿了。第二天再次包子开始
&emsp;&emsp;包子好吃啊，吃完包子之后就到了北航博物馆
&emsp;&emsp;逛完北航才之后才知道，还有一个更大的中国航空博物馆。听说那边的飞机多到爆啊！于是逛完了这边，马上就打了个滴滴到了6环外的小汤山。 --></p>
<p><strong><em> 未完待续 </em></strong></p>
]]></content>
      
        <categories>
            
            <category> 游记 </category>
            
            <category> 未完待续 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 北京 </tag>
            
            <tag> 军迷 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[青海湖之行]]></title>
      <url>/2017/04/27/%E9%9D%92%E6%B5%B7%E6%B9%96%E4%B9%8B%E8%A1%8C/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;2016年的9月初，一场国际会议(G20)在杭州举行。拜会议所赐我们有了一周的假期，7天的假期不想在家宅着，也不想回家。正好听说室友想去青海湖骑行，长这么大一直没有出过省的我，第一次动了出游的想法。</p>
<h2 id="规划出行"><a href="#规划出行" class="headerlink" title="规划出行"></a>规划出行</h2><p>&emsp;&emsp;最初想从杭州直接坐飞机到西宁，可是看了票价和周边的对比了一下，发觉从杭州萧山机场出发的航班貌似都比较贵。经过室友的权衡之后，我们选择了先坐火车到南京，然后从南京坐飞机到甘肃的兰州，最后再坐火车到青海的西宁。</p>
<h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>&emsp;&emsp;2016年8月31日，下班之后直接打车到了室友公司。等了半小时之后，打了车来到了杭州火车东站。G20果然是把杭州的人都往外赶啊！因为怕人太多所以提前了2个小时到火车站。事实证明我们是对的，杭州东站真的是好多人，有种春运提前了的感觉。经过了两小时的等待，我们上了前往南京的火车。当我们到达南京站的时候，已经是晚上11点了。地铁已经停运，打了个顺风车到了飞机场坐预订的酒店的车。在机场等到了酒店的车之后还被交警给扣了半小时，开车的司机，当着交警的面往七座车上塞了十几个人准备出发，被拦下来。<br>&emsp;&emsp;第二天一早，我们就坐酒店的车到了飞机场，等了1个多小时后上飞机出发。从飞机上看，地貌的变化还是很震惊的。从满眼的绿色到满片的黄土，西部缺水的情况，还是要亲眼看才知道的啊！将近11点，终于到了兰州。下车买了去火车站的票，兰州机场到火车站有动车，好评。<br>&emsp;&emsp;到了火车站之后，我们的肚子开始叫了！既然到了兰州了，怎么能不吃一碗正宗的兰州拉面呢。于是到了一个出租车，让师傅带我们到了最近的正宗的拉面馆。师傅带我们去了一家叫“磨沟沿”的面馆。正是午饭的时候，人也特别多，味道也相当不错。</p>
<p><strong><em> 未完待续 </em></strong></p>
]]></content>
      
        <categories>
            
            <category> 游记 </category>
            
            <category> 未完待续 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 青海湖 </tag>
            
            <tag> 骑车 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[top命令学习]]></title>
      <url>/2017/04/27/2017-4-27-top%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><strong><em> <a href="http://www.cnblogs.com/peida/archive/2012/12/24/2831353.html" target="_blank" rel="external">原文</a> 是在cnblog上的，但是cn上的显示有点捉急。我根据自己对原文章的学习以及理解，将它拷贝过来了。</em></strong></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&emsp;&emsp;top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。下面详细介绍它的使用方法。top是一个动态显示过程,即可以通过用户按键来不断刷新当前状态.如果在前台执行该命令,它将独占前台,直到用户终止该程序为止.比较准确的说,top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定.</p>
<h2 id="使用简介"><a href="#使用简介" class="headerlink" title="使用简介"></a>使用简介</h2><h3 id="1．命令格式："><a href="#1．命令格式：" class="headerlink" title="1．命令格式："></a>1．命令格式：</h3><p>&emsp;top [参数]</p>
<h3 id="2．命令功能："><a href="#2．命令功能：" class="headerlink" title="2．命令功能："></a>2．命令功能：</h3><p>&emsp;显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等</p>
<h3 id="3．命令参数："><a href="#3．命令参数：" class="headerlink" title="3．命令参数："></a>3．命令参数：</h3><p>&emsp;-b 批处理<br>&emsp;-c 显示完整的命令<br>&emsp;-I 忽略失效过程<br>&emsp;-s 保密模式<br>&emsp;-S 累积模式<br>&emsp;-i&lt;时间&gt; 设置间隔时间<br>&emsp;-u&lt;用户名&gt; 指定用户名<br>&emsp;-p&lt;进程号&gt; 指定进程<br>&emsp;-n&lt;次数&gt; 循环显示的次数</p>
<h2 id="运行实例"><a href="#运行实例" class="headerlink" title="运行实例"></a>运行实例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">root@server_test:~<span class="comment"># top</span></div><div class="line">top - 10:09:22 up 5 days, 20:37,  3 users,  load average: 0.00, 0.02, 0.05</div><div class="line">Tasks:  89 total,   3 running,  86 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu(s):  0.3 us,  0.2 sy,  0.0 ni, 99.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">KiB Mem:   4048124 total,  2210376 used,  1837748 free,   174232 buffers</div><div class="line">KiB Swap:        0 total,        0 used,        0 free.   376604 cached Mem</div><div class="line"></div><div class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</div><div class="line">12045 root      20   0 2351916  60184   3796 S   0.3  1.5  28:17.13 java</div><div class="line">    1 root      20   0   33444   2624   1308 S   0.0  0.1   0:01.23 init</div><div class="line">    2 root      20   0       0      0      0 S   0.0  0.0   0:00.05 kthreadd</div><div class="line">    3 root      20   0       0      0      0 S   0.0  0.0   0:00.08 ksoftirqd/0</div><div class="line">    5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H</div><div class="line">    7 root      20   0       0      0      0 S   0.0  0.0   2:21.28 rcu_sched</div><div class="line">    8 root      20   0       0      0      0 R   0.0  0.0   2:08.88 rcuos/0</div><div class="line">    9 root      20   0       0      0      0 S   0.0  0.0   2:09.37 rcuos/1</div><div class="line">   10 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcu_bh</div><div class="line">   11 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcuob/0</div><div class="line">   12 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcuob/1</div><div class="line">   13 root      rt   0       0      0      0 S   0.0  0.0   0:00.51 migration/0</div><div class="line">   14 root      rt   0       0      0      0 S   0.0  0.0   0:01.18 watchdog/0</div><div class="line">   15 root      rt   0       0      0      0 S   0.0  0.0   0:00.96 watchdog/1</div><div class="line">   16 root      rt   0       0      0      0 S   0.0  0.0   0:00.49 migration/1</div><div class="line">   17 root      20   0       0      0      0 S   0.0  0.0   0:00.11 ksoftirqd/1</div><div class="line">   19 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/1:0H</div><div class="line">   20 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 khelper</div><div class="line">   21 root      20   0       0      0      0 S   0.0  0.0   0:00.00 kdevtmpfs</div><div class="line">   22 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 netns</div><div class="line">   23 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 writeback</div><div class="line">   24 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kintegrityd</div><div class="line">   25 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 bioset</div><div class="line">   27 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kblockd</div><div class="line">   28 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 ata_sff</div><div class="line">   29 root      20   0       0      0      0 S   0.0  0.0   0:00.00 khubd</div><div class="line">   30 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 md</div><div class="line">   31 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 devfreq_wq</div><div class="line">   32 root      20   0       0      0      0 S   0.0  0.0   0:08.26 kworker/1:1</div><div class="line">   35 root      20   0       0      0      0 S   0.0  0.0   0:00.16 khungtaskd</div><div class="line">   36 root      20   0       0      0      0 S   0.0  0.0   0:00.26 kswapd0</div></pre></td></tr></table></figure>
<h3 id="前5行是统计信息汇总"><a href="#前5行是统计信息汇总" class="headerlink" title="前5行是统计信息汇总"></a>前5行是统计信息汇总</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top - 10:09:22 up 5 days, 20:37,  3 users,  load average: 0.00, 0.02, 0.05</div></pre></td></tr></table></figure>
<p>10:09:22 - 表示当前系统时间<br>up 5 days, 20:37 - 表示当前系统以及运行了5天20小时37分钟<br>3 users - 当前有3个用户登录<br>load average: 0.00, 0.02, 0.05 - load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Tasks:  89 total,   3 running,  86 sleeping,   0 stopped,   0 zombie</div></pre></td></tr></table></figure>
<p>显示目前系统共有89个进程，3个正着运行，86个休眠，0个停止进程，0个僵尸进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%Cpu(s):  0.3 us,  0.2 sy,  0.0 ni, 99.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div></pre></td></tr></table></figure>
<p>0.3%us — 用户空间占用CPU的百分比。<br>0.2% sy — 内核空间占用CPU的百分比。<br>0.0% ni — 改变过优先级的进程占用CPU的百分比<br>99.5% id — 空闲CPU百分比<br>0.0% wa — IO等待占用CPU的百分比<br>0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比<br>0.0% si — 软中断（Software Interrupts）占用CPU的百分比<br>0.0% st — (Steal time) 是当 hypervisor 服务另一个虚拟处理器的时候，虚拟 CPU 等待实际 CPU 的时间的百分比<br>备注：在这里CPU的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">KiB Mem:   4048124 total,  2210376 used,  1837748 free,   174232 buffers</div></pre></td></tr></table></figure>
<p>4048124k total — 物理内存总量（4GB）<br>2210376k used — 使用中的内存总量（2GB）<br>1837748k free — 空闲内存总量（1.7GB）<br>174232k buffers — 缓存的内存量 （166M）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">KiB Swap:        0 total,        0 used,        0 free.   376604 cached Mem</div></pre></td></tr></table></figure>
<p>0k total — 交换区总量（0k）<br>0k used — 使用的交换区总量（0K）<br>0k free — 空闲交换区总量（0k）<br>376604k cached — 缓冲的交换区总量（356M）</p>
<p>备注：<br>KiB Mem 行中使用中的内存总量（used）指的是现在系统内核控制的内存数，空闲内存总量（free）是内核还未纳入其管控范围的数量。纳入内核管理的内存不见得都在使用中，还包括过去使用过的现在可以被重复利用的内存，内核并不把这些可被重新使用的内存交还到free中去，因此在linux上free内存会越来越少，但不用为此担心。<br>如果出于习惯去计算可用内存数，这里有个近似的计算公式：KiB Mem 行的free + KiB Mem 行的buffers + KiB Swap 行的cached，按这个公式此台服务器的可用内存：18537836k +169884k +3612636k = 22GB左右。<br>对于内存监控，在top里我们要时刻监控 KiB Swap 行swap交换分区的used，如果这个数值在不断的变化，说明内核在不断进行内存和swap的数据交换，这是真正的内存不够用了。</p>
<h3 id="接下来是各进程（任务）的状态监控"><a href="#接下来是各进程（任务）的状态监控" class="headerlink" title="接下来是各进程（任务）的状态监控"></a>接下来是各进程（任务）的状态监控</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</div><div class="line">12045 root      20   0 2351916  60184   3796 S   0.3  1.5  28:24.74 java</div><div class="line">23210 root      20   0 2975048 438700  13856 S   0.3 10.8   0:45.20 java</div><div class="line">    1 root      20   0   33444   2624   1308 S   0.0  0.1   0:01.23 init</div><div class="line">    2 root      20   0       0      0      0 S   0.0  0.0   0:00.05 kthreadd</div></pre></td></tr></table></figure>
<p>PID — 进程id<br>USER — 进程所有者<br>PR — 进程优先级<br>NI — nice值。负值表示高优先级，正值表示低优先级<br>VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES<br>RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA<br>SHR — 共享内存大小，单位kb<br>S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程<br>%CPU — 上次更新到现在的CPU时间占用百分比<br>%MEM — 进程使用的物理内存百分比<br>TIME+ — 进程使用的CPU时间总计，单位1/100秒<br>COMMAND — 进程名称（命令名/命令行）</p>
<h2 id="其他使用技巧："><a href="#其他使用技巧：" class="headerlink" title="其他使用技巧："></a>其他使用技巧：</h2><p>1.多U多核CPU监控<br>在top基本视图中，按键盘数字“1”，可监控每个逻辑CPU的状况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">top - 10:55:18 up 5 days, 21:23,  2 users,  load average: 0.00, 0.01, 0.05</div><div class="line">Tasks:  86 total,   2 running,  84 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu0  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu1  :  0.0 us,  0.3 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">KiB Mem:   4048124 total,  2208124 used,  1840000 free,   175776 buffers</div><div class="line">KiB Swap:        0 total,        0 used,        0 free.   377228 cached Mem</div><div class="line"></div><div class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</div><div class="line">28111 root      20   0   25384   2256   1632 S   0.3  0.1   1:11.71 AliYunDunUpdate</div><div class="line">    1 root      20   0   33444   2624   1308 S   0.0  0.1   0:01.23 init</div><div class="line">    2 root      20   0       0      0      0 S   0.0  0.0   0:00.05 kthreadd</div><div class="line">    3 root      20   0       0      0      0 S   0.0  0.0   0:00.08 ksoftirqd/0</div></pre></td></tr></table></figure></p>
<p>观察上面的代码，服务器有2个逻辑CPU，实际上是4个物理CPU。再按数字键1，就会返回到top基本视图界面。<br>2.高亮显示当前运行进程<br>敲击键盘“b”（打开/关闭加亮效果）<br>我们发现进程id为2570的“top”进程被加亮了，top进程就是视图第二行显示的唯一的运行态（runing）的那个进程，可以通过敲击“y”键关闭或打开运行态进程的加亮效果。</p>
<p>3.进程字段排序<br>默认进入top时，各进程是按照CPU的占用量来排序的，在下图中进程ID为28894的java进程排在第一（cpu占用142%），进程ID为574的java进程排在第二（cpu占用16%）。<br><!-- ![top 默认进入](http://images.cnblogs.com/cnblogs_com/peida/top3.png) --><br><img src="/2017/04/27/2017-4-27-top命令学习/top1.png" alt="top 默认进入"><br>敲击键盘“x”（打开/关闭排序列的加亮效果），top的视图变化如下：<br><!-- ![top 敲击键盘“x”](http://images.cnblogs.com/cnblogs_com/peida/top4.png) --><br><img src="/2017/04/27/2017-4-27-top命令学习/top2.png" alt="top 敲击键盘“x”"><br>可以看到，top默认的排序列是“%CPU”。</p>
<ol>
<li>通过”shift + &gt;”或”shift + &lt;”可以向右或左改变排序列<!-- ![top shift + >](http://images.cnblogs.com/cnblogs_com/peida/top5.png) -->
<img src="/2017/04/27/2017-4-27-top命令学习/top3.png" alt="top shift + &gt;"></li>
</ol>
<h3 id="top命令实例"><a href="#top命令实例" class="headerlink" title="top命令实例"></a>top命令实例</h3><p>实例1：显示 完整命令<br>命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top -c</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">top - 11:04:32 up 5 days, 21:32,  2 users,  load average: 0.00, 0.01, 0.05</div><div class="line">Tasks:  87 total,   2 running,  85 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu(s):  0.2 us,  0.2 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">KiB Mem:   4048124 total,  2208316 used,  1839808 free,   176064 buffers</div><div class="line">KiB Swap:        0 total,        0 used,        0 free.   377324 cached Mem</div><div class="line"></div><div class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</div><div class="line">12045 root      20   0 2351916  60184   3796 S   0.3  1.5  28:28.04 /usr/<span class="built_in">local</span>/cloudmonitor/jre/bin/java -Djava.compiler=none -XX:-UseGCOverheadLimit -XX:NewRatio=1 -XX:SurvivorRa+</div><div class="line">27797 root      20   0   21960   1472   1040 R   0.3  0.0   0:00.01 top -c</div><div class="line">28157 root      20   0  131040  13176   8392 S   0.3  0.3   4:13.41 /usr/<span class="built_in">local</span>/aegis/aegis_client/aegis_10_19/AliYunDun</div><div class="line">    1 root      20   0   33444   2624   1308 S   0.0  0.1   0:01.23 /sbin/init</div><div class="line">    2 root      20   0       0      0      0 S   0.0  0.0   0:00.05 [kthreadd]</div><div class="line">    3 root      20   0       0      0      0 S   0.0  0.0   0:00.08 [ksoftirqd/0]</div><div class="line">    5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 [kworker/0:0H]</div><div class="line">    7 root      20   0       0      0      0 R   0.0  0.0   2:21.64 [rcu_sched]</div></pre></td></tr></table></figure>
<p>实例2：以批处理模式显示程序信息<br>命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top -b</div></pre></td></tr></table></figure>
<p>实例3：以累积模式显示程序信息<br>命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top -S</div></pre></td></tr></table></figure>
<p>实例4：设置信息更新次数<br>命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top -n 2</div></pre></td></tr></table></figure>
<p>说明：表示更新两次后终止更新显示</p>
<p>实例5：设置信息更新时间<br>命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top <span class="_">-d</span> 3</div></pre></td></tr></table></figure>
<p>说明：表示更新周期为3秒</p>
<p>实例6：显示指定的进程信息<br>命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top -p 23210</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">top - 11:09:31 up 5 days, 21:37,  2 users,  load average: 0.00, 0.01, 0.05</div><div class="line">Tasks:   1 total,   0 running,   1 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu(s):  0.2 us,  0.2 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">KiB Mem:   4048124 total,  2209724 used,  1838400 free,   176224 buffers</div><div class="line">KiB Swap:        0 total,        0 used,        0 free.   377404 cached Mem</div><div class="line"></div><div class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</div><div class="line">23210 root      20   0 2975048 438796  13856 S   0.0 10.8   0:45.93 java</div></pre></td></tr></table></figure>
<h3 id="top交互命令"><a href="#top交互命令" class="headerlink" title="top交互命令"></a>top交互命令</h3><p>在top 命令执行过程中可以使用的一些交互命令。这些命令都是单字母的，如果在命令行中使用了s 选项， 其中一些命令可能会被屏蔽。<br>&emsp;h 显示帮助画面，给出一些简短的命令总结说明<br>&emsp;k 终止一个进程。<br>&emsp;i 忽略闲置和僵死进程。这是一个开关式命令。<br>&emsp;q 退出程序<br>&emsp;r 重新安排一个进程的优先级别<br>&emsp;S 切换到累计模式<br>&emsp;s 改变两次刷新之间的延迟时间（单位为s），如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s<br>&emsp;f或者F 从当前显示中添加或者删除项目<br>&emsp;o或者O 改变显示项目的顺序<br>&emsp;l 切换显示平均负载和启动时间信息<br>&emsp;m 切换显示内存信息<br>&emsp;t 切换显示进程和CPU状态信息<br>&emsp;c 切换显示命令名称和完整命令行<br>&emsp;M 根据驻留内存大小进行排序<br>&emsp;P 根据CPU使用百分比大小进行排序<br>&emsp;T 根据时间/累计时间进行排序<br>&emsp;W 将当前设置写入~/.toprc文件中 </p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
            <category> 转载 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[find 命令]]></title>
      <url>/2017/04/25/2017-4-25-find-study-1/</url>
      <content type="html"><![CDATA[<p>find命令是一个无处不在命令，是linux中最有用的命令之一。find命令用于：在一个目录（及子目录）中搜索文件，你可以指定一些匹配条件，如按文件名、文件类型、用户甚至是时间戳查找文件。下面就通过实例来体验下find命令的强大。</p>

<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find [-H] [-L] [-P] [-D debugopts] [-Olevel] [path...] [expression]</div></pre></td></tr></table></figure>
<p>其实[-H] [-L] [-P] [-D debugopts] [-Olevel]这几个选项并不常用（至少在我的日常工作中，没有用到过），上面的find命令的常用形式可以简化为：</p>

<p>find [path…] [expression]</p>
<p>path：find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录<br>expression：expression可以分为——“-options [-print -exec -ok …]”<br>-options，指定find命令的常用选项，下节详细介绍<br>-print，find命令将匹配的文件输出到标准输出<br>-exec，find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为’command’ {  } \;，注意{   }和\；之间的空格 </p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[redis 学习入门]]></title>
      <url>/2017/04/25/2017-4-25-redis-study-1/</url>
      <content type="html"><![CDATA[<h3 id="redis的启动"><a href="#redis的启动" class="headerlink" title="redis的启动"></a>redis的启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server</div></pre></td></tr></table></figure>
<h3 id="进入redis的控制台"><a href="#进入redis的控制台" class="headerlink" title="进入redis的控制台"></a>进入redis的控制台</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-cli</div></pre></td></tr></table></figure>
<p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p>
<h3 id="通过配置启动redis"><a href="#通过配置启动redis" class="headerlink" title="通过配置启动redis"></a>通过配置启动redis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server redis.conf</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-cli中 使用auth password登录，然后执行操作，可以避免出现(error) NOAUTH Authentication required.的问题</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis <span class="built_in">set</span> name value</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis get name</div></pre></td></tr></table></figure>
<p><strong><em> 未完待续 </em></strong></p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
            <category> 未完待续 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用美团 meta-info 打渠道包，android 7.0安装出错问题]]></title>
      <url>/2017/02/08/2017-2-8-02-mete-info-v2-failed/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;android studio发布‘com.android.tools.build:gradle:2.2.0’之后，在打包时有了比以前更加严格的安全性校验。如果app使用了美团的meta-info校验方案，<br>会在安装时报错，提示</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Failure [INSTALL_PARSE_FAILED_NO_CERTIFICATES: Failed to collect certificates from /data/app/vmdl474743497.tmp/base.apk: META-INF/CERT.SF indicates /data/app/vmdl474743497.tmp/base.apk is signed using APK Signature Scheme v2, but no such signature was found. Signature stripped?]</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;这是因为Android 7.0（Nougat）引入一项新的应用签名方案APK Signature Scheme v2，它是一个对全文件进行签名的方案，能提供更快的应用安装时间、对未授权APK文件的更改提供更多保护，在默认情况下，Android Gradle 2.2.0插件会使用APK Signature Scheme v2和传统签名方案来签署你的应用。</p>
<p>&emsp;&emsp;目前采用的这种方式，已经不能够满足需求了。需求如下：</p>
<ol>
<li>打包速度快。</li>
<li>不依赖android studio等开发工具做构建。</li>
<li>最后能直接通过脚本运行的方式能在远端服务器运行。</li>
<li>良好的兼容性，目前主要针对android 7.0</li>
</ol>
<p>&emsp;&emsp;现在最新的打包方式主要研究了，美团的 <a href="https://github.com/Meituan-Dianping/walle" target="_blank" rel="external">walle</a> ，以及<a href="https://github.com/mcxiaoke/packer-ng-plugin" target="_blank" rel="external">PackerNg</a>。</p>
<p>&emsp;&emsp;Android应用使用的APK文件就是一个带签名信息的ZIP文件，根据 ZIP文件格式规范，每个ZIP文件的最后都必须有一个叫 Central Directory Record 的部分，这个CDR的最后部分叫”end of central directory record”，这一部分包含一些元数据，它的末尾是ZIP文件的注释。注释包含Comment Length和File Comment两个字段，前者表示注释内容的长度，后者是注释的内容，正确修改这一部分不会对ZIP文件造成破坏，利用这个字段，我们可以添加一些自定义的数据，PackerNg项目就是在这里添加和读取渠道信息，但是这个方案需要关闭最新的v2签名。美团的则是通过在v2签名的APK Signing Block区块，添加渠道信息，因为这个区域是不做校验，也不需要关闭最新的v2签名的。</p>
<p>&emsp;&emsp;考虑到未来可能的v2验证变成强制验证的情况，选择美团的walle打包，不失为一项不错的选择。但是美团的打包方案中是使用java代码进行打包的</p>
<p><strong><em> 未完待续 </em></strong></p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
            <category> 未完待续 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 自动化打包 </tag>
            
            <tag> v2校验 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[好饿的一次经历]]></title>
      <url>/2017/02/07/2017-2-7-02-imhungry/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;小学二年级，在村里的学校搬到了乡里面，更了名字叫乡中心小学。从此开始了我长达14年的住校生活！</p>
<p>&emsp;&emsp;小学的生活现在想想还真是无忧无虑的啊！今天就回忆一下，我永生难忘，也对我之后有很大影响的一个事件。具体日期我已记不清楚，那时候上学，我们都是自己带米，带菜到学校去蒸熟了吃的。</p>
<p>&emsp;&emsp;当时正好吃了午饭,我从学校给每个人配发的箱子里面取了新的米到取水的地方去放水蒸饭。人很多，吵吵闹闹的，我正准备去取水时，听到旁边两个人的说话，具体内容我现在记不清了，但是一句“水放的越多，越好吃”我倒是记住了。于是我当时脑抽的给我的饭盒放了满满当当的一大饭盒水，就跑回教室去睡午觉了。</p>
<p>&emsp;&emsp;经过了一下午的期待，终于等到了晚上检验成果的时候了。下课铃之后我飞快的跑到了蒸饭的笼子旁开始找我的饭盒，快到蒸饭的房子时看到有几个小孩拿着自己的方盒在哪冲洗，一边冲一边还在骂：睡这么缺德，蒸的稀饭全漏我饭盒上了。费劲的找到我的饭盒时，发现饭盒的盖子已经不是好好的改在饭盒上的了。我小心翼翼的拿起了我的饭盒，因为煮出来的是粥，所以很烫，我差点当场扔掉。把饭盒拿出锅炉房我在水池边仔细的打开饭盒看了一下，这他妈不就是我最讨厌的稀饭吗？果断倒掉。。。</p>
<p>&emsp;&emsp;晚上，饿是当然的，但我没想到我居然能坚持到下课去就寝。回到宿舍，我才发觉真正的危机开始了。由于那时候家里穷，平时也不会带什么零食吃的，最要命的是我们那时候的宿舍是在二楼，一楼到二楼的楼梯是有铁门关着的，二楼最中间的位置住了宿管的老师，他才有钥匙，而且二楼是没有厕所和水龙头的。当大家都睡着了之后，我还是难以入睡，饥饿让我爬起来来到了铁门边徘徊，发现门锁之后在门边徘徊了很久寻找是否有其它方法下楼。发现没有之后，只好蹑手蹑脚的走到宿管老师的门前敲门。借口和他说我要大便，从他那拿到了钥匙。</p>
<p>&emsp;&emsp;开了门之后，我跑到了水池边，猛灌了好多口水，饱腹感瞬间爆棚，但是很快一股饥饿感又从肚中传来。灌了几口自来水之后，我去厕所上了个厕所之后回到了宿舍。好在经过了自来水滋润的肚子，虽然饿，但是比之前缓和多了。还好这次也顺利的睡着了！</p>
<p>&emsp;&emsp;从此之后，我蒸饭的时候水都不会放多。我也开始信奉晚饭必须吃饱的原则，每当别人和我说什么早上吃好，中午吃饱，晚上吃少的这种话时，我都是不屑一顾的。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 忆往事 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用activity伪造dialog时无法全屏的解决方法]]></title>
      <url>/2017/02/07/2017-2-7-activity-show-dialog/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;在很多情况下根据业务需求，我们需要有类似于dialog那种弹出效果，但也需要activity的功能属性，比如回调，业务处理等。所以在这种情况下我们可能就会需要用到使用activty来模拟dialog效果。</p>
<p>&emsp;&emsp;伪造起来很简单，只需要重载startActivity和finish是的动画效果来实现弹出和退出的动画效果，在让activity继承dialog的theme。这样子打开activity的时候，就能实现类似dialog的效果了。</p>
<p>&emsp;&emsp;但是在使用中如果style中定义了windowIsFloating属性为true的时候，经常会碰到dialog显示不能占满屏幕，总会在四边有点padding。这时候如果改成false的话。padding是没有了，但是动画中会出现其它的问题，比如如果使用的效果是没有title的，动画过程中会有titleBar移动的过程显示，效果就不是很好了。<br>这时候我们需要在activity中加上下面的代码，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 需要添加的语句</span></div><div class="line">getWindow().setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.WRAP_CONTENT);</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;同时将windowIsFloating改为true。这样子弹出的效果就会很自然了。为了确保样式的统一，activity的样式也最好使用和app样式相同的父类。</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[listView OnItemClickListener，onItemClick 不执行]]></title>
      <url>/2016/12/19/2016-12-19-1/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;记录下自己所犯的错误，在写ListView的点击事件时OnItemClickListener，onItemClick方法没有执行，导致ListView条目点击事件失效，检查发现百度上有很多不同的答案，但究其本质都是ListView的Item抢占焦点或者Item没有获取焦点甚至没有绑定上OnItemClickListener监听事件，而我所犯的错误是在ListView的Item布局中引入了一个Style，在Style中有一项<item name="Android:clickable">true</item>，正是这一项导致所有Item都要抢占焦点，所以ListView的点击事件失效，在我去掉这一项之后ListView确实正常工作了。<br>&emsp;需要引以为戒的是，在android应用开发中，焦点没有获取或者其他组件抢占焦点的事情经常发生，我们可以在代码中，xml布局中，甚至Style中定义时候抢占焦点，在一般情况下，这个设置并不会造成什么异常，但我需要注意重要的组件在合适的时机必须拿到焦点，否则会产生意想不到的后果，比如我的ListView。一般组件获取焦点可以使用一下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">View.setFocusable(<span class="keyword">true</span>),对应xml : android:focusable=<span class="string">"true"</span>.                                </div><div class="line">View.setFocusableInTouchMode(<span class="keyword">true</span>),对应xml : android:focusableInTouchMode=<span class="string">"true"</span>.</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;注意：这两个属性要同时使用。<br>&emsp;&emsp;两者的意思是让组件可以获得焦点。不过有些区别，前者执行false条件后，在执行true，还是不能获取焦点。后者执行上述过程，还是能获取焦点。<br>当你加入上述代码后，在创建activity时，调用对应view的requestFocus()，（requestFocus()需要在setContentView之后执行）这样就可以获得焦点了。当editText失去焦点了，也就不会有软键盘了</p>
<p>&emsp;&emsp;但针对ListView还可以使用android:descendantFocusability属性，下面我们来看一下android:descendantFocusability用法简析<br>以下摘自：<a href="http://www.cnblogs.com/eyu8874521/archive/2012/10/17/2727882.html" target="_blank" rel="external">http://www.cnblogs.com/eyu8874521/archive/2012/10/17/2727882.html</a><br>&emsp;&emsp;开发中很常见的一个问题，项目中的listview不仅仅是简单的文字，常常需要自己定义listview，自己的Adapter去继承BaseAdapter，在adapter中按照需求进行编写，问题就出现了，可能会发生点击每一个item的时候没有反应，无法获取的焦点。原因多半是由于在你自己定义的Item中存在诸如ImageButton，Button，CheckBox等子控件(也可以说是Button或者Checkable的子类控件)，此时这些子控件会将焦点获取到，所以常常当点击item时变化的是子控件，item本身的点击没有响应。<br>&emsp;&emsp;这时候就可以使用descendantFocusability来解决啦，API描述如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">android:descendantFocusability</div><div class="line">Defines the relationship between the ViewGroup and its descendants when looking for a View to take focus.</div><div class="line">Must be one of the following constant values.</div></pre></td></tr></table></figure></p>
<p>该属性是当一个为view获取焦点时，定义viewGroup和其子控件两者之间的关系。</p>
<p>属性的值有三种：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">beforeDescendants：viewgroup会优先其子类控件而获取到焦点</div><div class="line">afterDescendants：viewgroup只有当其子类控件不需要获取焦点时才获取焦点</div><div class="line">blocksDescendants：viewgroup会覆盖子类控件而直接获得焦点</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;通常我们用到的是第三种，即在Item布局的根布局加上<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:descendantFocusability=”blocksDescendants”</div></pre></td></tr></table></figure></p>
<p>的属性就好了。</p>
]]></content>
      
        <categories>
            
            <category> 小记录 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[picasso 简单使用总结]]></title>
      <url>/2016/12/15/2016-12-15-picasso-1/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&emsp;&emsp;<a href="https://github.com/square/picasso" target="_blank" rel="external">Picasso</a> 是square开源的的功能强大的图像下载和缓存库。</p>
<h2 id="项目引用"><a href="#项目引用" class="headerlink" title="项目引用"></a>项目引用</h2><p> 1.使用MAVEN</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;com.squareup.picasso&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;picasso&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;2.5.2&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p> 2.使用GRADLE</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.picasso:picasso:2.5.2'</span></div></pre></td></tr></table></figure>
<p> 3.<a href="https://search.maven.org/remote_content?g=com.squareup.picasso&amp;a=picasso&amp;v=LATEST" target="_blank" rel="external">下载最新的包</a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>下面是最简单的调用，load方法加载图片，into指定对应的ImageVew<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Picasso.with(context).load(link).into(imageView);</div></pre></td></tr></table></figure></p>
<p>此处的link 可以是图片的 <strong>网络地址</strong> ，图片的 <strong>File文件</strong> ，或者 <strong>Uri地址</strong> ,以及Android的 <strong>ResourceId</strong></p>
<h3 id="1-placeholder"><a href="#1-placeholder" class="headerlink" title="1.placeholder"></a>1.placeholder</h3><p>当加载的图比较大，或者网络状况不是很好是，使用placeholder方法预先展示占位图片，不失为最好的选择。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Picasso.with(context).load(link).placeholder(R.drawable.holder).into(imageView);</div></pre></td></tr></table></figure>
<p>placeholder方法可以传入图片资源的id，以及Drawable对象。</p>
<h3 id="2-resize"><a href="#2-resize" class="headerlink" title="2.resize"></a>2.resize</h3><p>通过resize方法可以重新设置图片的显示宽高<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Picasso.with(context)</div><div class="line">		.load(link)</div><div class="line">		.placeholder(R.drawable.holder)</div><div class="line">		.resize(width,height)</div><div class="line">		.into(imageView);</div></pre></td></tr></table></figure></p>
<p>同时通过添加 <em>.centerInside()</em> 或者 <em>.centerCrop()</em> 来控制图片进行何种比例的缩放。<br><em>注意：</em> 这两个属性不能再没有设置resize的情况下添加，不然会报错</p>
<h3 id="3-error"><a href="#3-error" class="headerlink" title="3.error"></a>3.error</h3><p>当图片加载出错时，可以通过设置error回调，显示错误的提示图片<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Picasso.with(context)</div><div class="line">		.load(link)</div><div class="line">		.placeholder(R.drawable.holder)</div><div class="line">		.error(R.drawable.error)</div><div class="line">		.into(imageView);</div></pre></td></tr></table></figure></p>
<h3 id="4-transform"><a href="#4-transform" class="headerlink" title="4.transform"></a>4.transform</h3><p>通过实现Transformation接口，可以对展示的图片做处理<br>该接口需要实现两个方法<br>1.transform(android.graphics.Bitmap source)<br>对bitmap源文件做处理，并返回</p>
<p>2.key()<br>返回一个用于转换的唯一键</p>
<p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CropSquareTransformation</span> <span class="keyword">implements</span> <span class="title">Transformation</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Bitmap <span class="title">transform</span><span class="params">(Bitmap source)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> size = Math.min(source.getWidth(), source.getHeight());</div><div class="line">    <span class="keyword">int</span> x = (source.getWidth() - size) / <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> y = (source.getHeight() - size) / <span class="number">2</span>;</div><div class="line">    Bitmap result = Bitmap.createBitmap(source, x, y, size, size);</div><div class="line">    <span class="keyword">if</span> (result != source) &#123;</div><div class="line">      source.recycle();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">key</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"square()"</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="5-监听回调"><a href="#5-监听回调" class="headerlink" title="5.监听回调"></a>5.监听回调</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Picasso.Builder builder = <span class="keyword">new</span> Picasso.Builder(context);</div><div class="line">builder.listener(<span class="keyword">new</span> Picasso.Listener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onImageLoadFailed</span><span class="params">(Picasso picasso, Uri uri, Exception exception)</span> </span>&#123;</div><div class="line">                    exception.printStackTrace();</div><div class="line">                    <span class="comment">// 错误处理事件</span></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            builder.build().load(link)</div><div class="line">                    .transform(<span class="keyword">new</span> XXXTransform())</div><div class="line">                    .resize(width, height)</div><div class="line">                    .placeholder(R.drawable.placeholder)</div><div class="line">                    .into(imageView);</div></pre></td></tr></table></figure>
<p>通过上面的方法可以实现在图片加载出错的情况下实现回调，触发相应的错误机制</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Picasso.with(getApplicationContext())</div><div class="line">                .load(R.mipmap.ic_launcher)</div><div class="line">                .into(imageView, <span class="keyword">new</span> Callback() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line">                        </div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<p>Picasso的into方法有有个实现是可以传入一个callback，在图片加载成功和加载失败的时候得到回调。</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul>
<li>如果项目中使用了进行了混淆，需要加上如下配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-dontwarn com.squareup.okhttp.**</div></pre></td></tr></table></figure>
<ul>
<li>picasso 展示拍照后返回的file地址有时候会不显示，这是因为拍摄生成的图片大小过大，加载出错。需要做压缩之后在显示。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Picasso </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[平时碰到的问题汇总]]></title>
      <url>/2016/11/28/%E5%B9%B3%E6%97%B6%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<ul>
<li>多个相同fragment中的对象取出的背景是同一个</li>
<li>activity的windowSoftInputMode的设置对 其内部的fragment页面的影响</li>
<li>手上两台红米测试手机，在弹出请求权限的弹框，或者跳转系统页面之后，app会被杀掉。而且找不到明确的日志，而且还会出现时好时坏的情况。<br>最开始项目的sdkversion使用的是23，之后切换成24之后稍微好点。</li>
<li>更换Theme.AppCompat后的button变得很大，这是因为新版本的style对margin计算方法重新修改了<br>Button变大这个问题可以在你的AppThemes里面加上下面这句话解决：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">   	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:buttonStyle"</span>&gt;</span>@android:style/Widget.Button.Small<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 小记录 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小问题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[封装native代码调用，遇到的坑]]></title>
      <url>/2016/10/18/%E5%B0%81%E8%A3%85native%E4%BB%A3%E7%A0%81%E8%B0%83%E7%94%A8%EF%BC%8C%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>最近在学习facebook推出的react native技术，本篇就是记录在学习rn 封装原生模块的时候遇到的问题，做个记录。</p>
<p>本人按照<a href="http://reactnative.cn/docs/0.31/native-modules-android.html#content" title="Title" target="_blank" rel="external">rn中文网的教程</a> 进行Toast功能的封装，测试是否能够完成对应的操作。只不过因为rn本身就封装了一个 ToastAndroid的模块，所以在命名上做了一定的修改。<br><br>原来是<br><br><img src="/2016/10/18/封装native代码调用，遇到的坑/rn-nm-1.jpeg" alt="rn1"><br><br>现在是<br><br><img src="/2016/10/18/封装native代码调用，遇到的坑/rn-nm-2.jpeg" alt="rn2"><br><br>同时修改了show方法调用了之后，添加了文案上的区别。<br><br><img src="/2016/10/18/封装native代码调用，遇到的坑/rn-nm-3.jpeg" alt="rn3"><br></p>
<p>按照教程，先新建ToastModule，在新建实现了ReactPackage的文件，真正的问题出在接下来的一步，将这个package注册到MainApplication.java文件的getPackages方法中。可是我按照教程里面的android/app/src/main/java/com/your-app-name/MainApplication.java的路径去找寻这个文件是没有的。 仔细想想我是在现有项目中加入rn支持的，所以可能没有。于是重新使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~ $ react-native init AwesomeProject</div></pre></td></tr></table></figure>
<p>命令生成了一个项目观察了一下目录结构，发现MainApplication其实就是一个实现了ReactApplication接口的Application 类。于是也就自己手动在项目中按照新生成的项目建了一个这个文件。之后的步骤也很快按照教程里面的步骤完成了。</p>
<p>然后 开始测试 …此次省略遇到的启动服务，以及es5和es6写法不对出现的问题。 直接说，本篇要记录的问题<br><br><img src="/2016/10/18/封装native代码调用，遇到的坑/rn-nm-4.jpg" alt="rn4"></p>
<p>undefined is not an object 错误，也就是说我引入的模块是没有定义的。这就奇怪了呀！ 我完全是按着教程里的大纲敲下来的，不可能因为我是后加入的rn支持就找不到吧！ 这个问题卡了我很久。完全是一筹莫展，在咨询了rn交流群的人之后，也没人遇到这种问题。</p>
<p>于是之后在哪里一直在看按着教程敲的代码，直到看到这段代码<br><br><img src="/2016/10/18/封装native代码调用，遇到的坑/rn-nm-5.jpeg" alt="rn5"><br><br>发现这段代码和之前的getPackages方法有神似的地方啊！于是抱着反正现在没有其它方法的心态，在这里加上了自定义的那个package类。然后编译运行了代码<br><br><img src="/2016/10/18/封装native代码调用，遇到的坑/rn-nm-6.jpg" alt="rn6"><br><br>什么鬼，居然工作正常了。debug了一下代码，也的确是调用了自定义的那部分代码的。</p>
<p>为什么结果是这样，我现在也不清楚，先记录下问题，之后探讨一下原因吧！</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react-native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小记 jekyll 搭建blog]]></title>
      <url>/2016/10/11/2016-10-11-first-blog/</url>
      <content type="html"><![CDATA[<p>网上有很多使用jekyll搭建简单blog的教程，之前只是使用github pages简单的生成了一个。但是一直没有做进一步的操作，一直停留在原始状态。今天看了几个主题很漂亮，就打算也改个试试。</p>
<p>以下操作都是在mac osx 下操作完成的。</p>
<p>第一步安装jekyll</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">~ $ gem install jekyll</div><div class="line">~ $ jekyll new my-awesome-site</div><div class="line">~ $ <span class="built_in">cd</span> my-awesome-site</div><div class="line">~ /my-awesome-site $ bundle install</div><div class="line">~ /my-awesome-site $ bundle <span class="built_in">exec</span> jekyll serve</div><div class="line"><span class="comment"># =&gt; 打开浏览器 http://localhost:4000</span></div></pre></td></tr></table></figure>
<p>看这操作步骤，好简单的嘛！于是我也开始照着步骤，一步 一步的开始了。可是第一步好像就有点不对。 什么鬼，输入了一点反应都没有啊！ 尝试了几次之后，发现都是一个鬼样子，果断求助于google。结果是因为网络太慢和国内网络长城的原因。所以照着别人的做法，将rubygems.org资源，换成淘宝的镜像。</p>
<p>可以先运行 ‘gem sources -l’ 查看当前的镜像的地址。之后执行下列步骤就行了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">~ $ gem sources --remove https://rubygems.org/</div><div class="line">~ $ gem sources <span class="_">-a</span> http://ruby.taobao.org/</div><div class="line">~ $ gem sources <span class="_">-l</span></div></pre></td></tr></table></figure>
<p>然后再次执行第一步，可能还是看不到变化。别急，将命令换成”gem install jekyll -V”之后就能看到执行的进度了。接下来如果你的系统没有自己安装过ruby的话，就会接着报下一个错误，错误内容如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR:  While executing gem ... (Gem::FilePermissionError)</div><div class="line">    You dont have write permissions <span class="keyword">for</span> the /Library/Ruby/Gems/2.0.0 directory.</div></pre></td></tr></table></figure>
<p>这个错误的原因，mac系统自带的ruby，在尝试往它的库中加入东西时，是需要root的。有两个解决方法。一个是使用命令前面加上sudo，或者修改目录的用户。 另一个是重新安装一个ruby，笔者使用的是后一种方法。使用 homebrew 重新安装了一个ruby。 不过在执行这一步操作之前需要先安装rvm，rvm 是一個 ruby 的版本管理器，可以将每个ruby版本隔离，避免冲突。操作如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">curl -L https://get.rvm.io | bash <span class="_">-s</span> stable</div><div class="line">``` </div><div class="line"></div><div class="line">安装成功之后记得刷新一下本地配置文件。接下来就可以通过homebrew安装一个新的ruby了</div><div class="line"></div><div class="line">``` bash</div><div class="line">brew install ruby</div></pre></td></tr></table></figure>
<p>然后就能按照上面的指导，一步一步的完成之后的安装了。</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
